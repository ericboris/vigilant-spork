# -*- coding: utf-8 -*-
"""Project 2 RNN.ipynb
Automatically generated by Colaboratory.
Original file is located at
    https://colab.research.google.com/drive/1N6U11iuRq4-ihD5jDRT71iuYQzSxIFKs
Built following this tutorial:
https://github.com/spro/practical-pytorch/blob/master/char-rnn-generation/char-rnn-generation.ipynb
TODO: Set up docker file
TODO: Run docker file, make sure it builds
TODO: Get the proper workflow to pass in an input file
TODO: Clean up Repo
TODO: Clean up misc in this file
"""

import os
import torch
import random
import torch.nn as nn
from torch.autograd import Variable
import pickle
import time, math

# Build dictionary of known characters by the model
all_characters = ''
with open('../../data/cleaned_data/train.txt') as train:
    for line in train.readlines():
        for i in line:
            if i not in all_characters and i != '\n' and i.isalpha():
                all_characters += i
# print(f'ALL CHAR={sorted(all_characters)}\n\nDONE')

# add one for UNK where UNK is the last index in a tensor representation
n_characters = len(all_characters) + 1
UNK_INDEX = len(all_characters)

#print(str(all_characters))

#file = unidecode.unidecode(open('../../data/cleaned_data/train.txt').read())
# Swap to this for random chunk
file = open('../../data/cleaned_data/train.txt').read()
"""
file = []
with open('../../data/cleaned_data/train.txt') as f:
	for line in f:
		file.append(line)

for line in file:
	print(f'line={line}')
"""
file_len = len(file)
print(f'Top 10 Lines (First 323 characters):\n{file[:323]}\n')
print(f'file len (in characters) = {file_len}')

chunk_len = 40

def random_chunk(chunk_len):
    start_index = random.randint(0, file_len - chunk_len)
    end_index = start_index + chunk_len + 1
    return file[start_index:end_index]

class RNN(nn.Module):
    def __init__(self, input_size, hidden_size, output_size, n_layers=1):
        super(RNN, self).__init__()
        self.input_size = input_size
        self.hidden_size = hidden_size
        self.output_size = output_size
        self.n_layers = n_layers
        
        self.encoder = nn.Embedding(input_size, hidden_size)
        self.gru = nn.GRU(hidden_size, hidden_size, n_layers)
        self.decoder = nn.Linear(hidden_size, output_size)
    
    def forward(self, input, hidden):
        input = self.encoder(input.view(1, -1))
        output, hidden = self.gru(input.view(1, 1, -1), hidden)
        output = self.decoder(output.view(1, -1))
        return output, hidden

    def init_hidden(self):
        return Variable(torch.zeros(self.n_layers, 1, self.hidden_size))

# Turn string into list of longs
def char_tensor(string):
    tensor = torch.zeros(len(string)).long()
    for c in range(len(string)):
        if string[c] in all_characters:
            tensor[c] = all_characters.index(string[c])
        else:
            tensor[c] = UNK_INDEX
    return Variable(tensor)

def random_training_set(chunk):
    inp = char_tensor(chunk[:-1])
    target = char_tensor(chunk[1:])
    return inp, target

# Returns the top 3 next characters for a given string
def evaluate(prime_str='A', temperature=0.8):
    hidden = decoder.init_hidden()
    prime_input = char_tensor(prime_str)

    # Use priming string to "build up" hidden state
    for p in range(len(prime_str) - 1):
        _, hidden = decoder(prime_input[p], hidden)
    inp = prime_input[-1]

    output, hidden = decoder(inp, hidden)

    # Sample from the network as a multinomial distribution
    output_dist = output.data.view(-1).div(temperature).exp()
    top_4 = torch.multinomial(output_dist, 4)

    # this should go through and skip the UNK character if it is a top 3 character
    top_3 = []
    for i in range(4):
        if top_4[i] != UNK_INDEX:
            top_3.append(all_characters[top_4[i]])

    predicted_char_1 = top_3[0]
    predicted_char_2 = top_3[1]
    predicted_char_3 = top_3[2]
    predicted = predicted_char_1 + predicted_char_2 + predicted_char_3
    return predicted

def time_since(since):
    s = time.time() - since
    m = math.floor(s / 60)
    s -= m * 60
    return '%dm %ds' % (m, s)

def train(inp, target):
    # print('p1')
    hidden = decoder.init_hidden()
    # print('p2')
    decoder.zero_grad()
    # print('p3')
    loss = 0
    # print('p4')

    for c in range(chunk_len):
        # print('p5')
        output, hidden = decoder(inp[c], hidden)
        # print('p6')
        # print(f'out shape={output.shape}')
        
        # print(f'tar shape={target.shape}, tar[0]={target[0]}')
        # Added this reshape to fix "tensor has no dimension" error.
        target = torch.reshape(target, (len(target), 1))
        # print(f'tar shape={target.shape}, tar[0]={target[0]}')

        loss += criterion(output, target[c])

    # print('p7')
    loss.backward()
    # print('p8')
    decoder_optimizer.step()
    # print('p9')
    return loss.data.item() / chunk_len
    # Removed the following because error. 
    # return loss.data[0] / chunk_len

def write(file_name, obj):
	''' Write the object to a file with the given file name. '''
	with open(file_name, 'wb') as f:
		pickle.dump(obj, f)

def read(file_name):
	''' Return the read object. '''
	with open(file_name, 'rb') as f:
		return pickle.load(f)


n_epochs = 20000
print_every = 200
plot_every = 10
hidden_size = 200
n_layers = 4
lr = 0.01

decoder = None
if os.path.isfile(path='trained_model'):
	print('READ')
	decoder = read('trained_model')
else:
	print('WRITE')
	decoder = RNN(n_characters, hidden_size, n_characters, n_layers)

	decoder_optimizer = torch.optim.Adam(decoder.parameters(), lr=lr)
	criterion = nn.CrossEntropyLoss()

	start = time.time()
	all_losses = []
	loss_avg = 0

	for epoch in range(1, n_epochs + 1):
		#print(f'Epoch: {epoch}')

		# TODO WORKING HERE - Change from random chunk to random line.
		chunk = random_chunk(chunk_len)
		# chunk = random_line()
		# print(f'chunk:{chunk}\nchunk_len:{len(chunk)}')

		inp, target = random_training_set(chunk)
		# print(f'inp shape={inp.shape}, inp[0]={inp[0]}')
		# print(f'tar shape={target.shape}, tar[0]={target[0]}')
		loss = train(inp, target)     
		loss_avg += loss

		if epoch % print_every == 0:
			print('[%s (%d %d%%) %.4f]' % (time_since(start), epoch, epoch / n_epochs * 100, loss))
			print(f'INPUT:\n{chunk}\nPREDICTION:\n{evaluate("Wh")}\n')

		if epoch % plot_every == 0:
			all_losses.append(loss_avg / plot_every)
			loss_avg = 0

	write(file_name='trained_model', obj=decoder)

# Commented out IPython magic to ensure Python compatibility.
#import matplotlib.pyplot as plt
import matplotlib.ticker as ticker
# %matplotlib inline

#plt.figure()
#plt.plot(all_losses)


